<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[博客分类: 分布式 | 精神兵的 Blog]]></title>
  <link href="http://jackliu8722.github.com/blog/categories/distributed/atom.xml" rel="self"/>
  <link href="http://jackliu8722.github.com/"/>
  <updated>2013-10-26T21:27:16+08:00</updated>
  <id>http://jackliu8722.github.com/</id>
  <author>
    <name><![CDATA[jackliu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Java实现一个ICE应用]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/21/writing-an-ice-application-with-java/"/>
    <updated>2013-10-21T23:30:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/21/writing-an-ice-application-with-java</id>
    <content type="html"><![CDATA[<p>注意:本文翻译自ice官方文档</p>

<p>本文实现了一个简单的（但是完整的）客户端和服务器。</p>

<p>实现一个ICE应用程序包括以下几个步骤：</p>

<ol>
<li>完成slice定义并编译。</li>
<li>实现一个服务器并编译。</li>
<li>实现一个客户端并编译。</li>
</ol>


<p>如果已经实现了服务器，那么只需要写一个客户端，并且不需要写slice定义，只进行编译就行（很明显，在此情况下也不用实现服务器）。</p>

<p>本文描述的应用可以将客户端发送的文本在远程的服务器进行有序打印。为简单起见，我们的打印机会将文本简单地打印到终端，而不是真正的通过打印机打印。这样的目的只是为了显示客户端如何与服务器进行通信。一旦控制线程执行到了服务器应用程序的代码，就可以做任何它喜欢的事（包括将文本发送到真正的打印机上）。如何做到这一点是ICE提供的功能，本文并不涉及。</p>

<h4>Slice定义</h4>

<p>编写ICE应用程序的第一步写一个slice文件，其中包含了应用程序使用的接口。对于我们这个小小的打印程序，我们编写以下Slice定义：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>module Demo{
</span><span class='line'>    interface Printer{
</span><span class='line'>        void printString(string s);
</span><span class='line'>    }
</span><span class='line'>} 
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们将这个文本文件保存为Printer.ice.</p>

<p>Slice定义中，包含模块Demo,该模块仅仅包含一个称为Printer的接口。对于这个应用程序，接口只提供了一个单一的操作printString.该操作接受一个字符串作为其唯一的输入参数。字符串的文本内容是什么（可能在远程），打印机就打印什么。</p>

<h4>编译Slice文件</h4>

<p>创建Java应用程序的第一步是编译通过Slice定义的数据结构，以生成Java代理和框架。在Unix下，可以通过以下方式进行编译：</p>

<pre><code>$ mkdir generated
$ slice2java --output-dir generated Printer.ice
</code></pre>

<p>选项--output-dir将编译生成的文件输出到指定的目录下。这就避免了工作目录因生成大量的文件而造成混乱的现象。编译命令slice2java将slice定义的文件生成一些Java源文件。我们现在不用关心这些文件中的内容——它们包含了打印接口的代码，而这些接口我们定义在Printer.ice文件中。</p>

<h4>用Java编写并编译服务器</h4>

<p>为了实现我们的打印机接口，必须要创建一个servant类。按照惯例，servant类使用其接口名加一个后缀I。因此，我们的servant类称为PrinterI,并且源文件命名为PrinterI.java:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrinterI</span> <span class="kd">extends</span> <span class="n">Demo</span><span class="o">.</span><span class="na">_PrinterDisp</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printString</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span><span class="n">Ice</span><span class="o">.</span><span class="na">Current</span> <span class="n">current</span><span class="o">){</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>类PrinterI继承自一个称为_PrinterDisp的基类，该基类由slice2java编译器生成的，是一个抽象类，并且包含一个printString方法。该方法接受一个需要打印的字符串和一个类型为Ice.Current的对象（现在我们将忽略参数Ice.Current）.我们实现的printString方法，只是将字符串打印到终端。</p>

<p>服务器的其它代码在源文件Server.java中，其完整的代码如下：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Ice</span><span class="o">.</span><span class="na">Communicator</span> <span class="n">ic</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span><span class="o">{</span>
</span><span class='line'>            <span class="n">ic</span> <span class="o">=</span> <span class="n">Ice</span><span class="o">.</span><span class="na">Util</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Ice</span><span class="o">.</span><span class="na">ObjectAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">ic</span><span class="o">.</span><span class="na">createObjectAdapterWithEndpoints</span><span class="o">(</span><span class="s">&quot;SimplePrinterAdapter&quot;</span><span class="o">,</span><span class="s">&quot;defalut -p 10000&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Ice</span><span class="o">.</span><span class="na">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrinterI</span><span class="o">();</span>
</span><span class='line'>            <span class="n">adapter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">object</span><span class="o">,</span><span class="n">ic</span><span class="o">.</span><span class="na">stringToIdentity</span><span class="o">(</span><span class="s">&quot;SimplePrinterAdapter&quot;</span><span class="o">));</span>
</span><span class='line'>            <span class="n">adapter</span><span class="o">.</span><span class="na">activate</span><span class="o">();</span>
</span><span class='line'>            <span class="n">ic</span><span class="o">.</span><span class="na">waitForShutdown</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Ice</span><span class="o">.</span><span class="na">LocalException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">ic</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>            <span class="k">try</span><span class="o">{</span>
</span><span class='line'>                <span class="n">ic</span><span class="o">.</span><span class="na">destory</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>                <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>请注意，代码的结构通常如下：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Ice</span><span class="o">.</span><span class="na">Communicator</span> <span class="n">ic</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//在这里实现服务器</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Ice</span><span class="o">.</span><span class="na">LocalException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStakcTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span> <span class="n">ic</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>            <span class="c1">//清除</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="k">try</span><span class="o">{</span>
</span><span class='line'>                <span class="n">ic</span><span class="o">.</span><span class="na">destory</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">printlne</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>                <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在main函数的主体部分中，包含了一个捕获异常的try语句，并且在try语句中包含了所有服务器代码，随后有两个catch语句。其中第一个catch捕获所有ICE运行环境可能抛出的异常。该部分代码的目的是不管代码在任何地方遇到了意想不到的ICE运行时异常，退出当前的堆栈回到主函数中。第二个捕获异常的catch语句的目的是当代码某个地方遇到一个致命的错误时，可以简单地抛出一个异常，并携带一个错误信息。同样的，代码退出当前的堆栈回到主函数当中，并打印错误信息，然后向操作系统返回失败的结果。</p>

<p>在代码退出之前，如果通信器(communicator)创建成功，则需要销毁它。这样做的目的是为了正确的终止ICE运行时环境：程序必须调用communicator对象的destory，否则会产生未知的结果。</p>

<p>try代码块中包含的服务器代码如下：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ic</span> <span class="o">=</span> <span class="n">Ice</span><span class="o">.</span><span class="na">Util</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'><span class="n">Ice</span><span class="o">.</span><span class="na">ObjectAdapter</span> <span class="o">=</span> <span class="n">ic</span><span class="o">.</span><span class="na">createObjectAdapterWithEndpoints</span><span class="o">(</span><span class="s">&quot;SimplePrinterAdapter&quot;</span><span class="o">,</span><span class="s">&quot;defalut -p 10000&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Ice</span><span class="o">.</span><span class="na">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrinterI</span><span class="o">();</span>
</span><span class='line'><span class="n">adapter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">object</span><span class="o">,</span><span class="n">ic</span><span class="o">.</span><span class="na">stringToIdentity</span><span class="o">(</span><span class="s">&quot;SimplePrinterAdapter&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">adpater</span><span class="o">.</span><span class="na">activate</span><span class="o">();</span>
</span><span class='line'><span class="n">ic</span><span class="o">.</span><span class="na">waitForShutdown</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>服务器代码包含了以下几个步骤：</p>

<ol>
<li>我们通过Ice.Util.initialize方法初始化ICE运行时环境（由于服务器可能以命令行的方法运行，因此，在调用该方法时传递了参数args，在本例中，服务器不需要命令行参数）。初始化方法返回一个类Ice.Communicator对象的引用，这是ICE运行时环境主要的对象。</li>
<li>通过Communicator对象实例的createObjectAdapterWithEndpoints方法创建一个适配器对象，我们传递了两个字符串参数，第一个参数为SimplePrinterAdpater(适配器的名称)，另外一个参数是字符串default -p 10000,指示了适配器使用默认的协议（TCP/IP）监端口号10000的网络请求。</li>
<li>此时，服务端运行环境初始化完成，然后实例化一个PrinterI对象为我们的打印机接口创建一个服务。</li>
<li>通过调用适配器对象的add方法添加servant到运行时环境中，add方法的第一个参数为我们实例化的servant对象，另外一个参数是一个标识符，表示servat的名称，在这个例子中，即字符串"SimplePrinterAdapter"（如果有我们有多个打印机，每个将有一个不同的名字，或者更确切地说，拥有不同的对象标识）。</li>
<li>接下来，通过调用adapter对象的activate方法激活适配器（适配器最初处于未激活状态，假设有多个servant，并且共享同一个适配器，如果我想要甩的servant未被实例化之后才处理请求，那么适配器最初为未激活是非常有用的）。</li>
<li>最后，调用waitForShutdown挂用调用的线程，直到服务因调用一个方法终止运行时环境或者接收到一个终止。（在本例子中，当我们不再需要它时，可以通过命令行简单地中断服务器。）</li>
</ol>


<p>需要注意的是，虽然本例中的代码非常少，但这些代码对所有的服务器都适用的。为了方便，可以将这些代码放在一个辅助类中，此后，就不必再修改它（ICE提供了这样的辅助类Ice.Application）。对于本例的应用程序代码，实际上只包住了几行：定义PrinterI类用了7行代码，而实例化PrinterI对象并将其注册到适配器中只用了三行代码。</p>

<p>我们通过以下方式编译服务器代码：</p>

<pre><code>$ mkdir classes
$ javac -d classes -classpath classes:$ICE_HOME/lib/Ice.jar \
  Server.java PrinterI.java generated/Demo/*.java
</code></pre>

<p>通过以上方式将应用程序代码和IE编译器生成的代码都进行了编译，其中环境变量ICE_HOME为包含ICE运行时环境的根目录（例如，如果将ICE安装在/opt/ice目录下，则ICE_HOME的值应该设置为/opt/ice）。值得注意的是，对于JAVA的ICE环境中，使用了ant环境对源代码进行控制（ant类似于make，但是对java应用来说比较灵活），你可以看看ant的示例程序，以掌握如何使用该工具。</p>

<h4>编写并编译Java客户端</h4>

<p>客户端代码包含在Client.java源文件中，跟服务器代码非常相似，完整的代码如下：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span><span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Ice</span><span class="o">.</span><span class="na">Communicator</span> <span class="n">ic</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span><span class="o">{</span>
</span><span class='line'>            <span class="n">ic</span> <span class="o">=</span> <span class="n">Ice</span><span class="o">.</span><span class="na">Util</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Ice</span><span class="o">.</span><span class="na">ObjectPrx</span> <span class="n">base</span> <span class="o">=</span> <span class="n">ic</span><span class="o">.</span><span class="na">stringToProxy</span><span class="o">(</span><span class="s">&quot;SimplePrinterAdapter:default -p 10000&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Demo</span><span class="o">.</span><span class="na">PrinterPrx</span> <span class="n">printer</span> <span class="o">=</span> <span class="n">Demo</span><span class="o">.</span><span class="na">PrinterPrxHelper</span><span class="o">.</span><span class="na">checkedCast</span><span class="o">(</span><span class="n">base</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">printer</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Error</span><span class="o">(</span><span class="s">&quot;Invalid proxy&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">Ice</span><span class="o">.</span><span class="na">LocalException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">ic</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>            <span class="c1">// 清除</span>
</span><span class='line'>            <span class="c1">//</span>
</span><span class='line'>            <span class="k">try</span><span class="o">{</span>
</span><span class='line'>                <span class="n">ic</span><span class="o">.</span><span class="na">destory</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>                <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>注意</strong>：客户端的代码布局总体上跟服务器的布局是一样的，使用一个try catch块来处理错误，在try代码块中执行以下的操作：</p>

<ol>
<li>跟服务器一样，客户端通过调用Ice.Util.initialize方法初始化ICE运行时环境。</li>
<li>下一步的操作是取得远程打印的代理，通过调用通信器对象上的stringToProxy方法创建这个代理对象，并传字符串参数"SimplePrinterAdapter:default - 10000"。请注意该字符串中包含了对象的标识和服务器所使用的端口（显然，在将对象标识和端口硬编码到应用是不是一个好的主意，但在我们的应用中是可以工作的，当我们讨论IceGrid时，会遇到更加合理的方式）。</li>
<li>方法stringToProxy返回的代码对象的类型是Ice.ObjectProxy,它处在接口和类的父类。但实际上我们只与打印机交互，需要一个打印机接口的代理，而不是一个Object接口的代理。为了做到这一点，我们通过调用PrinterPrxHelper。checkedCast方法向下转型。该方法会向服务器发送检查和转型相关的请求，相当是向服务器询问“这是一个打印机接口的代理吗？”如果是的话，将返回一个Demo.Printer对象的代理，否则，如果是一些其它类型的接口，返回null。</li>
<li>接下来，需要测试下类型向下转型是否成功，如果没有，则抛出一个异常，终止客户端。</li>
<li>现在在我们的地址空间有一个可用的代理对象，并且可以调用printString方法，传递一个具有悠久历史的"Hello World!"字符串作为参数，服务器将会在终端在打印该字符串。</li>
</ol>


<p>然后像编译服务器代码一样编译客户端代码：</p>

<pre><code>$ javas -d classes -classpath classes::$ICE_HOME/lib/Ice.jar \
  Client.java PrinterI.java generated/Demo/*.java
</code></pre>

<h4>运行客户端和服务器</h4>

<p>为了运行客户端和服务器，我们首先在一个窗口中运行服务器：</p>

<pre><code>$ java Server
</code></pre>

<p>目前，在服务端我们将看不任何东西，因为服务器只是简单地等待客户端连接它。我们在另外一个窗口中运行客户端：</p>

<pre><code>$ java Client
$
</code></pre>

<p>客户端运行并退出后，并不会输出任何东西。但是，在服务器的窗口中，我们看到打印了字符串“Hello World！”。如果要终止服务器，可以通过命令行中断程序。（在讨论Ice.Application中，我们将看到更简洁的方式来终止服务器。）</p>

<p>如果出现任何未知的错误，客户端将打印错误信息。例如，如果在运行客户端之前未启动服务哭喊，我们将得到类似下面的错误信息：</p>

<pre><code>Ice.ConnectionRefusedException
   error = 0
    at IceInternal.ConnectRequestHandler.getConnection(ConnectRequestHandler.java:240)
    at IceInternal.ConnectRequestHandler.sendRequest(ConnectRequestHandler.java:138)
    at IceInternal.Outgoing.invoke(Outgoing.java:66)
    at Ice._ObjectDelM.ice_isA(_ObjectDelM.java:30)
    at Ice.ObjectPrxHelperBase.ice_isA(ObjectPrxHelperBase.java:111)
    at Ice.ObjectPrxHelperBase.ice_isA(ObjectPrxHelperBase.java:77)
    at Demo.HelloPrxHelper.checkedCast(HelloPrxHelper.java:228)
    at Client.run(Client.java:65)
    Caused by: java.net.ConnectException: Connection refused
     ...
</code></pre>

<p>需要注意的是，服务器和客户端要运行成功，CLASSPATH路径中必须包含ICE类库和类的目录，例如：</p>

<pre><code>$ export CLASSPATH=$CLASSPATH:./classes:$ICE_HOME/lib/Ice.jar
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ICE Chat Demo(中文翻译)]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/20/ice-chat-demo/"/>
    <updated>2013-10-20T10:36:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/20/ice-chat-demo</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>ZeroC提供了一个简单的应用，该应用允许用户接入一个聊天室，并且与其它用户进行聊天。此聊天应用提出了一些有趣的设计，这些设计在开发一个分布式应用时，可能会成为我们面临的挑战，因此它是一个极好的案例研究。</p>

<p>聊天应用使用C++实现了服务端，客户端可以使用不同的语言，图形化程序使用C#, Java和C++，控制台程序使用C++实现，而基于web的客户端程序使用Java(applet), PHP和ActionScript.应用程序的各个组成部分由下图所示，我们将在后面的章节中对这些组件进行详细地探讨。</p>

<p><img class="center" src="/images/ice-chat-demo/ice-chat-demo-01.png"></p>

<p>ZeroC提供了一个公共的聊天服务器，你可以通过以下几种方式使用它：</p>

<ul>
<li>通过浏览器使用PHP, Silverlight, Applet或者Flash客户端进行聊天。</li>
<li>下载编译好的Java或者.Net图形客户端。</li>
<li>使用ICE支持的语言自己实现一个客户端。</li>
</ul>


<p>如果你愿意，也可以下载完整的应用程序源代码，并在自己的系统上运行。</p>

<p>点击下面的链接继续阅读我们的聊天应用程序的介绍。如果对更详细的讨论感兴趣，请参阅更详细的<a href="http://www.zeroc.com/chat/articles.html">技术文章</a>。</p>

<h3>内容</h3>

<h5>ICE是什么</h5>

<p>ICE（Internet Communications Engine）是一个分布式计算平台。它支持多种操作系统，编译器和编程语言，并允许你创建异构的分布式应用程序。换句话说，ICE让您轻松地创建分布式应用程序，并且可以运行在不同的操作系统上，同时可以用不同的语言编写，ICE允许这些应用程序无缝地进行交互，如下图所示。</p>

<p><img class="center" src="/images/ice-chat-demo/ice-chat-demo-02.png"></p>

<h5>Slice</h5>

<p>无论开发者使用什么语言来实现应用程序，一种称为Slice的规范语言可以为应用程序定义类和接口。然后，编译器将这种独立于语言的规范转换成特定语言的API。生成的API考虑到了许多通信细节，而这些通信细节实现起来往往是比较困难的，否则需要开发者自己去实现。下图显示了一个典型的ICE应用的C++工具链。</p>

<p><img class="center" src="/images/ice-chat-demo/ice-chat-demo-03.png"></p>

<h5>客户端和服务端</h5>

<p>在其它的分布式系统中，ICE应用由客户端和服务端组成，并共同完成任务。术语客户端和服务端不是应用程序特定部分的固定设计模式，相反，它们表示应用程序请求的角色。</p>

<ul>
<li>客户端是主动的实体，发送服务请求到服务器。</li>
<li>服务是被动的实体，响应客户端的请求并提供服务。</li>
</ul>


<p>从理论上来讲，一个服务器只响应请求，但不发送请求。同样地，一个客户端只发送请求但不提供服务，如下图所示。</p>

<p><img class="center" src="/images/ice-chat-demo/ice-chat-demo-04.png"></p>

<p>作为一个客户端和服务器程序，这是很常见的。例如，客户端可能在服务器上启动一个长时间运行的操作，作为启动操作的一部分，客户端可以向服务器提供一个回调操作，当启动操作完成后，服务器可以通过回调通知客户端，在此情况下，当客户端执行启动操作时，客户端充当客户端的角色，而当服务器通知操作完成时，客户端又充当服务器的角色，如下图所示。因此，通常将客户端-服务器系统描述为对等系统更为准确。</p>

<p><img class="center" src="/images/ice-chat-demo/ice-chat-demo-05.png"></p>

<h5>对象和代理</h5>

<p>一个ICE对象是对一个本地或者远程实体的抽象，并且可以响应客户端请求。它有一个唯一的标识和表示对象支持的一些已命名的操作的接口，这些对象可以支持更多的接口。客户端通过调用对象的方法向服务器发送请求。</p>

<p>一个代理是客户端用来访问ICE对象的句柄。除了代理代表远程地址空间的一个对象以外，你可以认为代理类似于C++中的指针或者Java中的引用。当客户端调用代理的一个方法时，ICE运行环境需要小心地定位对象，如果有必要，启动服务器实例化对象，并且在客户端和服务器之间传递参数。</p>

<p><img class="center" src="/images/ice-chat-demo/ice-chat-demo-06.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zookeeper-源码分析(二)——Server启动流程]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/16/zookeeper-yuan-ma-fen-xi-02-serverqi-dong-liu-cheng/"/>
    <updated>2013-10-16T08:23:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/16/zookeeper-yuan-ma-fen-xi-02-serverqi-dong-liu-cheng</id>
    <content type="html"><![CDATA[<p>Zookeeper中，server的启动入口为类org.apache.zookeeper.server.quorum.QuorumPeerMain的main方法，由zkServer.sh脚本调用。其main方法的内容如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">QuorumPeerMain</span> <span class="n">main</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QuorumPeerMain</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">main</span><span class="o">.</span><span class="na">initializeAndRun</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalArgumentException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Invalid arguments, exiting abnormally&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">USAGE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">USAGE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ConfigException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Invalid config, exiting abnormally&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Invalid config, exiting abnormally&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Unexpected exception, exiting abnormally&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Exiting normally&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在main方法，调用了类QuorumPeerMain的initializeAndRun方法做后续的处理，其源码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">protected</span> <span class="kt">void</span> <span class="n">initializeAndRun</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">ConfigException</span><span class="o">,</span> <span class="n">IOException</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="c1">//创建配置类</span>
</span><span class='line'>    <span class="n">QuorumPeerConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QuorumPeerConfig</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//如果只有一个参数，则调用配置类的parse方法解析配置文件</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">config</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 启动并调度清理任务，定时清理数据目录下的数据</span>
</span><span class='line'>    <span class="n">DatadirCleanupManager</span> <span class="n">purgeMgr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DatadirCleanupManager</span><span class="o">(</span><span class="n">config</span>
</span><span class='line'>            <span class="o">.</span><span class="na">getDataDir</span><span class="o">(),</span> <span class="n">config</span><span class="o">.</span><span class="na">getDataLogDir</span><span class="o">(),</span> <span class="n">config</span>
</span><span class='line'>            <span class="o">.</span><span class="na">getSnapRetainCount</span><span class="o">(),</span> <span class="n">config</span><span class="o">.</span><span class="na">getPurgeInterval</span><span class="o">());</span>
</span><span class='line'>    <span class="n">purgeMgr</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//运行quorum模式</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">config</span><span class="o">.</span><span class="na">servers</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runFromConfig</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//无配置文件，或者服务的数量为0，运行standalone模式</span>
</span><span class='line'>        <span class="n">LOG</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Either no config or no quorum defined in config, running &quot;</span>
</span><span class='line'>                <span class="o">+</span> <span class="s">&quot; in standalone mode&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// there is only server in the quorum -- run as standalone</span>
</span><span class='line'>        <span class="n">ZooKeeperServerMain</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在initializedAndRun方法中，zookeeper首先创建QuorumPeerConfig类解析配置文件，然后根据配置是否存在和server的数量选择运行的模式。如果无配置文件或者server的数量为1(即只有当前server)，则运行standalone模式，即代码中执行ZookeeperServerMain.main(args),否则以quorum模式运行，即以QuorumPeerConfig的实例为参数运行runFromConfig函数，其代码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">runFromConfig</span><span class="o">(</span><span class="n">QuorumPeerConfig</span> <span class="n">config</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ManagedUtil</span><span class="o">.</span><span class="na">registerLog4jMBeans</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JMException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">LOG</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Unable to register log4j JMX control&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">LOG</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Starting quorum peer&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ServerCnxnFactory</span> <span class="n">cnxnFactory</span> <span class="o">=</span> <span class="n">ServerCnxnFactory</span><span class="o">.</span><span class="na">createFactory</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">//配置是客户端连接Zookeeper服务器的端口，以及最大连接数</span>
</span><span class='line'>      <span class="n">cnxnFactory</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getClientPortAddress</span><span class="o">(),</span>
</span><span class='line'>                            <span class="n">config</span><span class="o">.</span><span class="na">getMaxClientCnxns</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//创建管理quorum协议的QuorumPeer类</span>
</span><span class='line'>      <span class="n">quorumPeer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QuorumPeer</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">//设置客户端连接Zookeeper服务器的端口，Zookeeper会监听这个端口，接受客户端的访问请求</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setClientPortAddress</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getClientPortAddress</span><span class="o">());</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setTxnFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">FileTxnSnapLog</span><span class="o">(</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getDataLogDir</span><span class="o">()),</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getDataDir</span><span class="o">())));</span>
</span><span class='line'>      <span class="c1">//设置集群中的其它zookeeper</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setQuorumPeers</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getServers</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//设置选举算法</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setElectionType</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getElectionAlg</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//设置server ID</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setMyid</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getServerId</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//这个时间是作为Zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setTickTime</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getTickTime</span><span class="o">());</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setMinSessionTimeout</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getMinSessionTimeout</span><span class="o">());</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setMaxSessionTimeout</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getMaxSessionTimeout</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//initLimit配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 10 个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 5*2000=10 秒</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setInitLimit</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getInitLimit</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//syncLimit配置项标识 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 2*2000=4 秒</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setSyncLimit</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getSyncLimit</span><span class="o">());</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setQuorumVerifier</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getQuorumVerifier</span><span class="o">());</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setCnxnFactory</span><span class="o">(</span><span class="n">cnxnFactory</span><span class="o">);</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setZKDatabase</span><span class="o">(</span><span class="k">new</span> <span class="n">ZKDatabase</span><span class="o">(</span><span class="n">quorumPeer</span><span class="o">.</span><span class="na">getTxnFactory</span><span class="o">()));</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">setLearnerType</span><span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">getPeerType</span><span class="o">());</span>
</span><span class='line'>      <span class="c1">//实现了Runable接口的start方法，启动线程。</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="n">quorumPeer</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// warn, but generally this is ok</span>
</span><span class='line'>      <span class="n">LOG</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Quorum Peer interrupted&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>runFromConfig的执行流程中，主要创建了QuorumPeer对象，该类定义了Server类型。首先根据配置对象中的配置信息设置相关的配置，然后调用start函数启动服务，QuorumPeer类将在后面的文章中进行详细地分析。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zookeeper-源码分析(一)——简介]]></title>
    <link href="http://jackliu8722.github.com/blog/2013/10/09/zookeeper-yuan-ma-fen-xi-01-jian-jie/"/>
    <updated>2013-10-09T23:10:00+08:00</updated>
    <id>http://jackliu8722.github.com/blog/2013/10/09/zookeeper-yuan-ma-fen-xi-01-jian-jie</id>
    <content type="html"><![CDATA[<h2>Zookeeper是什么</h2>

<p>Zookeeper是Hadoop的一个子项目，它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：维护配置信息(maintaining configuration information)、名字服务(naming service)、分布式同步(distributed synchronization)、组服务(group services)等等，以上的服务经常应用在分布式系统当中。</p>

<p>Zookeeper的目标是封装好复杂并易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户，从而降低用户实现分布式系统的难度。</p>
]]></content>
  </entry>
  
</feed>
