---
layout: post
title: "ICE Chat Demo(中文翻译)"
date: 2013-10-20 10:36
comments: true
categories: 分布式{distributed}
---
###简介
ZeroC提供了一个简单的应用，该应用允许用户接入一个聊天室，并且与其它用户进行聊天。此聊天应用提出了一些有趣的设计，这些设计在开发一个分布式应用时，可能会成为我们面临的挑战，因此它是一个极好的案例研究。

聊天应用使用C++实现了服务端，客户端可以使用不同的语言，图形化程序使用C#, Java和C++，控制台程序使用C++实现，而基于web的客户端程序使用Java(applet), PHP和ActionScript.应用程序的各个组成部分由下图所示，我们将在后面的章节中对这些组件进行详细地探讨。

{% img  center /images/ice-chat-demo/ice-chat-demo-01.png %}

ZeroC提供了一个公共的聊天服务器，你可以通过以下几种方式使用它：

  * 通过浏览器使用PHP, Silverlight, Applet或者Flash客户端进行聊天。
  * 下载编译好的Java或者.Net图形客户端。
  * 使用ICE支持的语言自己实现一个客户端。
  
如果你愿意，也可以下载完整的应用程序源代码，并在自己的系统上运行。

点击下面的链接继续阅读我们的聊天应用程序的介绍。如果对更详细的讨论感兴趣，请参阅更详细的[技术文章](http://www.zeroc.com/chat/articles.html)。

###内容
#####ICE是什么
ICE（Internet Communications Engine）是一个分布式计算平台。它支持多种操作系统，编译器和编程语言，并允许你创建异构的分布式应用程序。换句话说，ICE让您轻松地创建分布式应用程序，并且可以运行在不同的操作系统上，同时可以用不同的语言编写，ICE允许这些应用程序无缝地进行交互，如下图所示。

{% img  center /images/ice-chat-demo/ice-chat-demo-02.png %}

#####Slice
无论开发者使用什么语言来实现应用程序，一种称为Slice的规范语言可以为应用程序定义类和接口。然后，编译器将这种独立于语言的规范转换成特定语言的API。生成的API考虑到了许多通信细节，而这些通信细节实现起来往往是比较困难的，否则需要开发者自己去实现。下图显示了一个典型的ICE应用的C++工具链。

{% img  center /images/ice-chat-demo/ice-chat-demo-03.png %}

#####客户端和服务端
在其它的分布式系统中，ICE应用由客户端和服务端组成，并共同完成任务。术语客户端和服务端不是应用程序特定部分的固定设计模式，相反，它们表示应用程序请求的角色。

* 客户端是主动的实体，发送服务请求到服务器。
* 服务是被动的实体，响应客户端的请求并提供服务。

从理论上来讲，一个服务器只响应请求，但不发送请求。同样地，一个客户端只发送请求但不提供服务，如下图所示。

{% img  center /images/ice-chat-demo/ice-chat-demo-04.png %}

作为一个客户端和服务器程序，这是很常见的。例如，客户端可能在服务器上启动一个长时间运行的操作，作为启动操作的一部分，客户端可以向服务器提供一个回调操作，当启动操作完成后，服务器可以通过回调通知客户端，在此情况下，当客户端执行启动操作时，客户端充当客户端的角色，而当服务器通知操作完成时，客户端又充当服务器的角色，如下图所示。因此，通常将客户端-服务器系统描述为对等系统更为准确。

{% img  center /images/ice-chat-demo/ice-chat-demo-05.png %}

#####对象和代理
一个ICE对象是对一个本地或者远程实体的抽象，并且可以响应客户端请求。它有一个唯一的标识和表示对象支持的一些已命名的操作的接口，这些对象可以支持更多的接口。客户端通过调用对象的方法向服务器发送请求。

一个代理是客户端用来访问ICE对象的句柄。除了代理代表远程地址空间的一个对象以外，你可以认为代理类似于C++中的指针或者Java中的引用。当客户端调用代理的一个方法时，ICE运行环境需要小心地定位对象，如果有必要，启动服务器实例化对象，并且在客户端和服务器之间传递参数。

{% img  center /images/ice-chat-demo/ice-chat-demo-06.png %}
